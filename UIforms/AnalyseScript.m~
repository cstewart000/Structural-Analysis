function model = AnalyseScript(Structure)
% TODO
    



% Using the shortG format
format shortG;

% Add relevant searchpaths
% addpath('UIforms');

%%  Check that Each of hte structure definition Tables exist
if(exist('nodeData.mat'))
        nodeExists_bool =1;
        load('nodeData.mat');
else
    message('you need to define the nodes');
    nodeUI();
end

if(exist('memberData.mat'))
        membersExists_bool =1;
        load('memberData.mat');
else
    message('you need to define the members');
    memberUI();
end

if(exist('sectionData.mat'))
        sectionsExists_bool =1;
        load('sectionData.mat');
else
    message('you need to define the sections');
    sectionUI();
end

if(exist('materialData.mat'))
        sectionsExists_bool =1;
        load('materialData.mat');
else
    message('you need to define the materials');
    materialUI();
end

if(exist('memberLoadData.mat'))
        memberLoadsExists_bool =1;
        load('memberLoadData.mat');
else
    message('you need to define the loads');
    materialUI();
end

%Structure = StructureClass
%BikeWheel.loadTables();

%Structure.loadTables(nodeData,memberData,sectionData,materialData);

Structure.loadTables();
Structure.loadArrayLists();
Structure.addGeometryToMembers();
Structure.calcLocalStiffness();
Structure.calcMemTransform();
Structure.calcGlobalStiffnes();
Structure.createStiffnessMatrix();

Structure.createRestraintCodes();

Structure.convertNodeRestraintCodeToDOFVector()
Structure.getRestraintDOFVector()

Structure.calculateReducedStiffnessMatrix();
Structure.calculateFlexibilityMatrix();
Structure.calculateReducedFlexibilityMatrix()

% TODO Implement Loads form
%Structure.MemberLoads_array{1} = struct('member',2, 'loadType', 'UDL', 'axis', 'local' , 'magnitude', -50E3);
%Structure.

Structure.memberUDLs()
Structure.createBodyLoadVector();
Structure.createGlobalLoadVector();
Structure.reduceGlobalLoadVector();

Structure.calculateDisplacements();

Structure.calculateMemberForces();
Structure.calculateGlobalForces(); % Reactions



Structure.determinePlotScale()
Structure.nodeReactionPlot()

Structure.appliedLoadPlots()
Structure.memberMomentPlot()
Structure.memberShearPlot()
Structure.memberAxialPlot()
Structure.draw()
Structure.analysis_status = true;

currentfig = gcf;
savefig('currentfig.fig');

% Return the model
model = Structure;

end
